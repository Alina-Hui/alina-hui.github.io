<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Equations of antiquity 古代的定理</title>
      <link href="/2018/07/14/cjjlri5g0000igkvy5vqaanr1/"/>
      <url>/2018/07/14/cjjlri5g0000igkvy5vqaanr1/</url>
      <content type="html"><![CDATA[<h1 id="Perface-序"><a href="#Perface-序" class="headerlink" title="Perface 序"></a>Perface 序</h1><p>公理：对未经证实的事实的陈述。</p><p>定理：根据特定公理体系正式推导所得的陈述，不受实验误差或认知方式的影响。</p><p>假说、猜想：尚未证明的数学陈述，但有支持这些陈述的实质性证据。</p><p>区分数学和实验科学包括物理、化学、生物的原则：数学中的事实永远不能用经验证据、表面上讲得通的道理或统计测试来证明。</p><p>数学的两重性：</p><p>   1.是因其本身而存在的一个知识体系。</p><p>   2.是表达宇宙知识的一种语言。</p><h1 id="The-world’s-simplest-equation-世界上最简单的公式"><a href="#The-world’s-simplest-equation-世界上最简单的公式" class="headerlink" title="The world’s simplest equation 世界上最简单的公式"></a>The world’s simplest equation 世界上最简单的公式</h1><p>对$1+1=2$这个公式通过集合论来解释的话大体意思就是：任何两个不相交的只有一个元素的集合的并集是一个有两个元素的集合。</p><p>等式的形成历史：公元250年前后(亚历山大港的丢番图；字母缩写)→16世纪后期(用x和y代表位置数量)→1557年(《砺智石》；“$=$”出现)</p><p>到了19世纪，数学家们意识到前辈依赖的假设并不一定为真。打破古代数学坚冰的第一道裂缝出现在19世纪初叶，非欧几何的发现。</p><p>“柏拉图主义者”的观点：数学以及我们研究的大量其它数学创造物，都代表了超越了人类思维的客观现实。（所以数学是自洽的，$1+1=2$没有矛盾性。）</p><h1 id="The-discovery-of-zero-零的发现"><a href="#The-discovery-of-zero-零的发现" class="headerlink" title="The discovery of zero 零的发现"></a>The discovery of zero 零的发现</h1>]]></content>
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>About this category</title>
      <link href="/2018/07/14/cjjlri5f40000gkvy2gf66g98/"/>
      <url>/2018/07/14/cjjlri5f40000gkvy2gf66g98/</url>
      <content type="html"><![CDATA[<p>[My English is really bad.]</p><p>I learned German in my freshman year, but I haven’t used it for a long time.</p><p>Thus I want to study German again.</p><p>This is the only reason why I need to set this category.</p>]]></content>
      
      <categories>
          
          <category> German </category>
          
      </categories>
      
      
        <tags>
            
            <tag> introduce </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>科目四</title>
      <link href="/2018/07/12/cjjlri5gf0010gkvyk78ftixv/"/>
      <url>/2018/07/12/cjjlri5gf0010gkvyk78ftixv/</url>
      <content type="html"><![CDATA[<h1 id="违法行为综合判断与案例分析-42题"><a href="#违法行为综合判断与案例分析-42题" class="headerlink" title="违法行为综合判断与案例分析(42题)"></a>违法行为综合判断与案例分析(42题)</h1><p>1.高速公路上发生故障，应该开启危险报警闪关灯后下车，在故障车后设置警示标志，联系保险公司或者维修店进行拖曳维修。货运车在高速上最高车速不超过100公里/小时。</p><p>2.鸣喇叭催促前方机动车不算违法行为。</p><p>3.通过急转弯减速靠右行驶。</p><p>4.机动车核载人数：大型客车20人以上；中型客车10-19人；小型客车少于9人；微型载客汽车8人以下。</p><p>5.高速公路大型客车最高限速110公里/小时。</p><p>6.A2驾驶证的准驾车型为牵引车，A2驾驶证还可以驾驶的车型有：B1、B2、C1、C2、C3、C4、M。</p><p>  B1：中型客车；B2：大型货车；C1：小型汽车；C2：小型自动挡骑车；C3：低速载货汽车；C4：三轮汽车；M：轮式自行机械车</p><p>7.最高行驶速度不超过30公里/小时(机动车)、15公里/小时(拖拉机、电瓶车、轮式专用机械车)的情况：</p><p>​    1）进出非机动车道，通过铁道路口、急弯、窄路、窄桥、交叉路口</p><p>​    2）掉头、转弯、下坡路</p><p>​    3）雾、雪、雨、沙尘、冰雹，能见度在50米以内</p><p>​    4）冰雪、泥泞的道路上</p><p>​    5）牵引发生故障的机动车</p><h1 id="安全行车常识-420题"><a href="#安全行车常识-420题" class="headerlink" title="安全行车常识(420题)"></a>安全行车常识(420题)</h1><p>1.驶出环岛，需先开启右转向灯。</p><p>2.驾驶机动车通过短而陡的上坡坡道时，采用加速冲坡的方法，在接近坡顶时应提前松开加速踏板，利用惯性冲过坡顶。</p><p>3.</p><h1 id="常见交通标志、标线和交通手势辨识-231题"><a href="#常见交通标志、标线和交通手势辨识-231题" class="headerlink" title="常见交通标志、标线和交通手势辨识(231题)"></a>常见交通标志、标线和交通手势辨识(231题)</h1><h1 id="驾驶职业道德和文明驾驶常识-169题"><a href="#驾驶职业道德和文明驾驶常识-169题" class="headerlink" title="驾驶职业道德和文明驾驶常识(169题)"></a>驾驶职业道德和文明驾驶常识(169题)</h1><h1 id="恶劣气候和复杂道路条件下驾驶常识-223题"><a href="#恶劣气候和复杂道路条件下驾驶常识-223题" class="headerlink" title="恶劣气候和复杂道路条件下驾驶常识(223题)"></a>恶劣气候和复杂道路条件下驾驶常识(223题)</h1><h1 id="紧急情况下避险常识-112题"><a href="#紧急情况下避险常识-112题" class="headerlink" title="紧急情况下避险常识(112题)"></a>紧急情况下避险常识(112题)</h1><h1 id="交通事故救护及常见危化品处置常识-39题"><a href="#交通事故救护及常见危化品处置常识-39题" class="headerlink" title="交通事故救护及常见危化品处置常识(39题)"></a>交通事故救护及常见危化品处置常识(39题)</h1><p>1.高速公路上发生事故后人员应疏散到护栏外。</p><p>2.搬运昏迷失去知觉的伤员首先要放开起到，再采取仰卧位。</p><p>3.对无骨端外露的骨折伤员肢体固定时，要超过伤口上下关节。</p><p>4.救助全身燃烧的伤员应采取向身上喷冷水灭火的措施。</p><p>5.救助失血过多出现休克的伤员要采取保暖措施。</p><p>6.伤员骨折处出血时，应先止血和消毒，然后再固定。</p><p>7.烧伤伤员口渴时，可喝少量淡盐水。</p><p>8.采用指压止血法为动脉出血伤员止血时，拇指压住伤口的近心端动脉。</p><h1 id="防御性驾驶技术-100题"><a href="#防御性驾驶技术-100题" class="headerlink" title="防御性驾驶技术(100题)"></a>防御性驾驶技术(100题)</h1>]]></content>
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> driving test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Inside No.9 S01 E01</title>
      <link href="/2018/07/11/cjjlri5fk0009gkvykk1v4sa4/"/>
      <url>/2018/07/11/cjjlri5fk0009gkvykk1v4sa4/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Movies and TV shows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> teleplay_UK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>介绍Python对象类型</title>
      <link href="/2018/07/09/cjjlri5g0000kgkvygzn2pncp/"/>
      <url>/2018/07/09/cjjlri5g0000kgkvygzn2pncp/</url>
      <content type="html"><![CDATA[<p>[PS. 从第四章开始，笔记的内容会缩略很多，以后有空再考虑补上全部的吧。]</p><h1 id="为什么使用内置类型"><a href="#为什么使用内置类型" class="headerlink" title="为什么使用内置类型"></a>为什么使用内置类型</h1><h2 id="Python的核心数据类型"><a href="#Python的核心数据类型" class="headerlink" title="Python的核心数据类型"></a>Python的核心数据类型</h2><p>在Python程序中处理的每样东西都是一种对象。</p><p>Python中没有类型声明，运行的表达式的语法决定了创建和使用的对象的类型。</p><p>Python是动态类型(自动跟踪类型而不要求声明代码)的，但它也是强类型语言(只能对一个对象进行适合该类型的有效操作)。</p><h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><p>打印对象有两种形式：</p><ul><li><p>全精度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3.1415</span>*<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>用户友好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">3.1415</span>*<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>字符串是单个字符的字符串的序列。</p><h2 id="序列的操作"><a href="#序列的操作" class="headerlink" title="序列的操作"></a>序列的操作</h2><p>在Python中可以进行反向索引，负的索引号会简单地与字符串的长度相加。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">-1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[len(s)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>分片(slice)操所：X[I:J]表示取出在X中从偏移量为I，直到但不包括偏移量为J的内容。</p><p>在一个分片中，左边界默认为0，右边界默认为分片序列的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">'Spam'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[:<span class="number">-1</span>]</span><br><span class="line"><span class="string">'Spa'</span></span><br></pre></td></tr></table></figure><h2 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h2><p>字符串在Python中具有不可变性。</p><h2 id="类型特定的方法"><a href="#类型特定的方法" class="headerlink" title="类型特定的方法"></a>类型特定的方法</h2><p>字符串支持一个叫格式化的高级替代操作，以一个表达式的形式和一个字符串方法调用形式使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%s,eggs,and %s'</span> % (<span class="string">'spam'</span>,<span class="string">'SPAM'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0&#125;,eggs,and &#123;1&#125;'</span> % (<span class="string">'spam'</span>,<span class="string">'SPAM'</span>)</span><br></pre></td></tr></table></figure><p>序列的操作是通用的，但是方法不通用。可用于多种类型的通用型操作都是以内置函数或表达式的形式出现的，如<code>len(x)</code>,类型特定的操作都是以方法调用的形式出现的，如<code>aString.upper()</code>。</p><h2 id="编写字符串的其它方法"><a href="#编写字符串的其它方法" class="headerlink" title="编写字符串的其它方法"></a>编写字符串的其它方法</h2><p>Python中字符串可以包括在单引号或双引号中，也允许在三个引号（单或双）中包括多行字符串常量。</p><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="序列操作"><a href="#序列操作" class="headerlink" title="序列操作"></a>序列操作</h2><h2 id="类型特定的操作"><a href="#类型特定的操作" class="headerlink" title="类型特定的操作"></a>类型特定的操作</h2><h2 id="边界检查"><a href="#边界检查" class="headerlink" title="边界检查"></a>边界检查</h2><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><h2 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h2><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="映射操作"><a href="#映射操作" class="headerlink" title="映射操作"></a>映射操作</h2><h2 id="重访嵌套"><a href="#重访嵌套" class="headerlink" title="重访嵌套"></a>重访嵌套</h2><h2 id="键的排序：for循环"><a href="#键的排序：for循环" class="headerlink" title="键的排序：for循环"></a>键的排序：for循环</h2><h2 id="迭代和优化"><a href="#迭代和优化" class="headerlink" title="迭代和优化"></a>迭代和优化</h2><h2 id="不存在的键：if测试"><a href="#不存在的键：if测试" class="headerlink" title="不存在的键：if测试"></a>不存在的键：if测试</h2><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><h2 id="为什么要用元组"><a href="#为什么要用元组" class="headerlink" title="为什么要用元组"></a>为什么要用元组</h2><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="其它文件类工具"><a href="#其它文件类工具" class="headerlink" title="其它文件类工具"></a>其它文件类工具</h2><h1 id="其他核心类型"><a href="#其他核心类型" class="headerlink" title="其他核心类型"></a>其他核心类型</h1><h2 id="如何破坏代码的灵活性"><a href="#如何破坏代码的灵活性" class="headerlink" title="如何破坏代码的灵活性"></a>如何破坏代码的灵活性</h2><h2 id="用户定义的类"><a href="#用户定义的类" class="headerlink" title="用户定义的类"></a>用户定义的类</h2><h2 id="剩余的内容"><a href="#剩余的内容" class="headerlink" title="剩余的内容"></a>剩余的内容</h2>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic_Chinese </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Overview of Supervised Learning</title>
      <link href="/2018/07/09/cjjlri5fk0006gkvywe67tm5p/"/>
      <url>/2018/07/09/cjjlri5fk0006gkvywe67tm5p/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic_English </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>部署操作系统</title>
      <link href="/2018/07/08/cjjlri5gf0018gkvycnrg0zj1/"/>
      <url>/2018/07/08/cjjlri5gf0018gkvycnrg0zj1/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> LINUX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic_Chinese </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Artificial Intelligence：Its Roots and Scope</title>
      <link href="/2018/07/08/cjjlri5f40002gkvy30wao9bo/"/>
      <url>/2018/07/08/cjjlri5f40002gkvy30wao9bo/</url>
      <content type="html"><![CDATA[<blockquote><p><em>Invention, it must be humbly admitted, does not consist in creating out of void, but out of chaos; the materials must, in the first place, be afforded….</em> </p><p>—MARY SHELLEY, Frankenstein</p></blockquote><h2 id="Artificial-Intelligence-An-Attempted-Definition"><a href="#Artificial-Intelligence-An-Attempted-Definition" class="headerlink" title="Artificial Intelligence: An Attempted Definition"></a>Artificial Intelligence: An Attempted Definition</h2><p>For many reasons, the initial definition of artificial intelligence falls short of unambiguously defining the field. If anything, it has only led to further questions and the paradoxical notion of a field of study whose major goals include its own definition.</p><p>For the time being, we will simply define AI as the collection of problems and methodologies studied by AI researchers.</p><h1 id="AI-EARLY-HISTORY-AND-APPLICATIONS"><a href="#AI-EARLY-HISTORY-AND-APPLICATIONS" class="headerlink" title="AI: EARLY HISTORY AND APPLICATIONS"></a>AI: EARLY HISTORY AND APPLICATIONS</h1><blockquote><p><em>All men by nature desire to know…</em></p><p>—ARISTOTLE, Opening sentence of the <em>Metaphysics</em></p></blockquote><h2 id="From-Eden-to-ENIAC-Attitude-toward-Intelligence-Knowledge-and-Human-Artifice"><a href="#From-Eden-to-ENIAC-Attitude-toward-Intelligence-Knowledge-and-Human-Artifice" class="headerlink" title="From Eden to ENIAC: Attitude toward Intelligence,Knowledge, and Human Artifice"></a>From Eden to ENIAC: Attitude toward Intelligence,Knowledge, and Human Artifice</h2><h3 id="A-Brief-History-of-the-Foundations-for-AI"><a href="#A-Brief-History-of-the-Foundations-for-AI" class="headerlink" title="A Brief History of the Foundations for AI"></a>A Brief History of the Foundations for AI</h3>]]></content>
      
      <categories>
          
          <category> Artificial Intelligence </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic_English </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>隐马尔可夫模型</title>
      <link href="/2018/07/07/cjjlri5gf0015gkvyvuobclbe/"/>
      <url>/2018/07/07/cjjlri5gf0015gkvyvuobclbe/</url>
      <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>隐马尔可夫模型是关于时序的概率模型，可用于标注问题 (状态对应标记)，描述由隐藏的马尔可夫链随机生成观测序列的过程 (一个隐藏的马尔可夫链随机生成不可观测的状态随机序列→由各个状态生成一个观测而产生观测随机序列)，属于生成模型。</p><p>序列的每一个位置又可以看作是一个时刻。</p><p>隐马尔可夫模型由初始概率分布、状态转移分布、观测概率分布确定，所以初始状态概率向量$\pi$、状态转移概率矩阵$A$、观测概率矩阵$B$为隐马尔可夫模型$\lambda$的三要素：</p><center>$\lambda=(A,B,\pi)$</center><p>其中，初始状态概率向量$\pi$和状态转移概率矩阵$A$决定状态序列 (状态序列是隐藏的)，观测概率矩阵$B$决定观测序列。</p><center>$A=[a_{ij}]_{N \times M}$</center><p>$a_{ij}=P(i_{i+1}=q_i | i_t=q_i); i=1,2 \cdots ,N; j=1,2, \cdots ,N$ 代表时刻$t$处于状态$q_i$的条件下在时刻$t+1$转移到状态$q_j$的概率。$N$是可能的状态数，$M$是可能的观测数。</p><center>$B=[b_j(k)]_{N \times M}$</center><p>$b_j(k)=P(o_t=v_k | i_t=q_j) ; k=1,2, \cdots ,M ; j=1,2, \cdots ,N$ 是时刻$t$处于状态$q_j$的条件下生成观测$v_k$的概率。</p><center>$\pi =(\pi_i)$</center><p>$\pi =P(i_1=q_i),i=1,2, \cdots ,N$ 是时刻$t$=1处于状态$q_i$的概率。</p><p>$A$与$\pi$决定了隐藏的马尔可夫链，生成不可观测的状态序列。$B$确定了如何从状态生成观测，与状态序列综合确定了如何产生观测序列。</p><p>隐马尔可夫模型做了两个基本假设：</p><ol><li>齐次马尔可夫性假设：<strong>隐藏的马尔可夫链</strong>在任意时刻t的状态只依赖于<strong>前一时刻的状态</strong>。</li><li>观测独立性假设：任意时刻的<strong>观测</strong>只依赖于<strong>该时刻的马尔可夫链的状态</strong>。</li></ol><h2 id="观测序列的生成过程"><a href="#观测序列的生成过程" class="headerlink" title="观测序列的生成过程"></a>观测序列的生成过程</h2><p>输入：$\lambda=(A,B,\pi)$，观测序列长度$T$;</p><p>输出：观测序列$O=(o_1,o_2, \cdots ,o_T)$</p><p>​    (1)按照初始状态分布$\pi$产生状态$i_1$</p><p>​    (2)另$t=1$</p><p>​    (3)按照状态$i_t$的观测概率分布$b_{i_t}(k)$生成$o_t$</p><p>​    (4)按照状态$i_t$的状态转移概率分布$\{ a_{i_t i_{t+1}} \}$产生状态 $i_{t+1},i_{t+1}=1,2, \cdots ,N$</p><p>​    (5)令$t=t+1$; 如果$t&lt;T$, 转步(3)；否则，终止</p><p>即生成初始状态分布→生成观测概率分布→生成状态概率分布</p><h2 id="模型的三个基本问题"><a href="#模型的三个基本问题" class="headerlink" title="模型的三个基本问题"></a>模型的三个基本问题</h2><p>1.概率计算问题：给定模型$\lambda$和长度为T的观测序列$O=(o_1,o_2, \cdots ,o_T)$，计算模型$\lambda$下观测序列$O$出现的概率$P(O|\lambda)$。</p><p>2.学习问题(用极大似然估计的方法估计参数)：已知观测序列，估计模型的参数，使得在该模型下观测序列概率$P$最大。</p><p>3.预测问题(解码问题;给定观测序列，求最有可能的对应的状态序列)：已知模型和观测序列，求对给定观测序列条件概率$P(I | O)$最大的状态序列$I=(i_1,i_2, \cdots ,i_T)$。</p><h1 id="概率计算算法"><a href="#概率计算算法" class="headerlink" title="概率计算算法"></a>概率计算算法</h1>]]></content>
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic_Chinese </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Mathjax</title>
      <link href="/2018/07/06/cjjlri5gf000qgkvy9wl5l8ec/"/>
      <url>/2018/07/06/cjjlri5gf000qgkvy9wl5l8ec/</url>
      <content type="html"><![CDATA[<p>NexT有自带Mathjax，所以启用Mathjax的方法也非常简单，只要修改主题目录内_config.yml中的MathJax Support</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  cdn:</span> <span class="string">//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></span><br></pre></td></tr></table></figure><p>注意：三句都得修改。</p>]]></content>
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用什么工具写博客</title>
      <link href="/2018/07/06/cjjlri5g0000ogkvyt61j7cd9/"/>
      <url>/2018/07/06/cjjlri5g0000ogkvyt61j7cd9/</url>
      <content type="html"><![CDATA[<p>我在写博客的过程中使用到了两种工具：Typora和Sublime</p><p>Sublime就不用多说了，Typora比Sublime好的一点在于它所见即所得。用两个编辑器写出来的博文格式也有点区别,Sublime没有那么支持中文。</p><p>但是如果用了本地预览，用Sublime修改博文可以立马看到效果，而Typora就无法得到(修改的那篇博文会编程Untitled)，需要重新启用hexo s。</p><p>为了能够得到所见即所得的效果，我后来使用了Typora作为写博客的工具，但是在使用过程中我发现在用Typora编辑博文时不小心把源文件给删掉了，Typora中编辑好的、保存过的文件内容也会一并消失，需要在偏好设置里手动勾选自动保存按钮，而使用Sublime并不会出现这种问题。</p><p>个人觉得为了保险起见还是应该把博文做个备份，可以把所有博文投放在另一个博客平台上，也可以在电脑里专门建一个备份文件夹，把所有源文件复制进去。</p><p>如果想直接在电脑里备份，为了方便可以用上批处理(xcopy)和计划任务(taskschd.msc)，可以省力不少。</p>]]></content>
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我们的宇宙图像</title>
      <link href="/2018/07/03/cjjlri5gf000ugkvyuygvzevl/"/>
      <url>/2018/07/03/cjjlri5gf000ugkvyuygvzevl/</url>
      <content type="html"><![CDATA[<p>早在公元前340年，希腊哲学家亚里士多德在他的《论天》一书中，就能够对于地球是一个圆球而不是一块平板这个信念提出两个有力的论证:</p><ul><li><strong>月食是由于地球运行到太阳与月亮之间引起的</strong>。地球在月亮上的影子总是圆的，这只有在地球本身为球形的前提下才成立。 加果地球是一块平坦的圆盘，除非月食总是发生在太阳正好位于这个圆盘中心的正下方的时刻，否则地球的影子就会被拉长而成为椭圆形。 </li><li>希腊人从旅行中知道，<strong>在南方观测北极星，比在较北地区，北极星在天空中显得较低。</strong>因为北极星位于北极的正上方，所以它出现在北极的观察者的头顶上，而对于赤道上的某观察者，北极星刚好出现在地平线上 </li></ul>]]></content>
      
      <categories>
          
          <category> Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> astronomy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>绪论</title>
      <link href="/2018/07/03/cjjlri5gf000wgkvy1nnsqlyh/"/>
      <url>/2018/07/03/cjjlri5gf000wgkvy1nnsqlyh/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NexT主题内建归档categories时出现的bug</title>
      <link href="/2018/07/03/cjjlri5fk000dgkvyxwfll081/"/>
      <url>/2018/07/03/cjjlri5fk000dgkvyxwfll081/</url>
      <content type="html"><![CDATA[<p>我建博客的目的是为了把我的读书笔记迁移下，然后个人更偏爱把各分类放在menu里而不是categories里，所以使用了<a href="https://www.zhihu.com/question/33324071" target="_blank" rel="noopener">内建归档categories</a>。 </p><p>在本地预览时一切ok，但是当我上传到github之后自定义的分类menu无法打开，总是出现404错误，试过了n多方法，网上也搜了一大圈，可是就是无法解决这个bug。</p><p>之后我把../public/categories/…里所有的index.html都打开来看了一遍，并没有发现什么问题，然后试着把artificial-intelligence文件夹(我categories里第一个归档文件夹就是这个)里的index.html复制黏贴替换了categories文件夹里的index.html(categories里的归档文件夹数目根据分类个数而定，但是index.html只有一个)。</p><p>然后重新上传了一次，bug没了…..</p><p>╮(╯▽╰)╭</p>]]></content>
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机网络概述</title>
      <link href="/2018/07/02/cjjlri5gf0019gkvyb515efrl/"/>
      <url>/2018/07/02/cjjlri5gf0019gkvyb515efrl/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Computer Networks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic_Chinese </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>统计学习方法概论</title>
      <link href="/2018/07/01/cjjlri5gf0012gkvyd6mjpxzi/"/>
      <url>/2018/07/01/cjjlri5gf0012gkvyd6mjpxzi/</url>
      <content type="html"><![CDATA[<h1 id="统计学习"><a href="#统计学习" class="headerlink" title="统计学习"></a>统计学习</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>建立在计算机及网络之上</li><li>以数据为研究对象</li><li>目的是对数据进行预测与分析</li><li>以方法为中心</li></ol><p>按照Herbert A.Simon的观点，统计学习是计算机系统通过运用数据及统计方法提高系统性能的机器学习。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>统计学习(统计机器学习 Statistical Machine Learning)关于数据的假设(也是统计学习的前提)是同类数据(同种性质的数据)具有一定的统计规律性。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>假设空间(hypothesis space)：</strong>学习模型的集合。<br><strong>统计学习方法的三要素：</strong>模型(model;模型的假设空间)、策略(strategy;模型选择的准则)、算法(algorithm;模型学习的算法)<br><strong>实现统计学习方法的步骤：</strong> 得到有限的训练数据集合→确定学习模型的集合→确定学习的策略→实现学习的算法→选择最优模型→对数据进行预测或分析</p><h1 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>实例通常由特征向量表示，模型实际都是定义在特征空间上的。<br><strong>回归问题：</strong>输入变量与输出变量均为连续变量。<br><strong>分类问题：</strong>输出变量为有限个离散变量。<br><strong>标注问题：</strong>输入变量与输出变量均为变量序列。<br>监督学习关于数据的基本假设是输入与输出的随机变量X和Y具有联合概率分布。(训练数据与测试数据被看作是依联合概率分布P(X,Y)独立同分布产生的)</p><h1 id="统计学习三要素"><a href="#统计学习三要素" class="headerlink" title="统计学习三要素"></a>统计学习三要素</h1><p> 方法=模型+策略+算法</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>非概率模型由决策函数表示，概率模型由条件概率表示</p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><p><strong>损失函数：</strong>度量模型一次预测的好坏。<br><strong>风险函数：</strong>度量平均意义下模型预测的好坏。</p><h3 id="损失函数和风险函数"><a href="#损失函数和风险函数" class="headerlink" title="损失函数和风险函数"></a>损失函数和风险函数</h3>]]></content>
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic_Chinese </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Introduction About AI</title>
      <link href="/2018/06/30/cjjlri5fk0008gkvynbipvyf0/"/>
      <url>/2018/06/30/cjjlri5fk0008gkvynbipvyf0/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Artificial Intelligence </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic_English </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python使用入门及如何运行</title>
      <link href="/2018/06/28/cjjlri5fk000egkvyol3vtud8/"/>
      <url>/2018/06/28/cjjlri5fk000egkvyol3vtud8/</url>
      <content type="html"><![CDATA[<p>这篇没涉及什么技术性知识，只是用于帮助了解Python而已。</p><h1 id="选择Python的主要因素"><a href="#选择Python的主要因素" class="headerlink" title="选择Python的主要因素"></a>选择Python的主要因素</h1><p>软件质量、提高开发者的效率、程序的可移植性、标准库的支持、组件集成、享受乐趣</p><h2 id="软件质量"><a href="#软件质量" class="headerlink" title="软件质量"></a>软件质量</h2><p>Python的特性是以统一并有限的方式进行交互。<br>Python的设计理念是极简主义，”EIBTI”，明了胜于晦涩。(import this)</p><h1 id="Python的定义"><a href="#Python的定义" class="headerlink" title="Python的定义"></a>Python的定义</h1><p>Python一般可以定义为面向对象的脚本语言。<br>“脚本”倾向于描述简单的顶层代码文件，”程序”用来描述相对复杂的多文件应用。<br>Python的三个角色：Shell工具、控制语言(常规角色)、使用便捷(通常应用于快速作业任务和长期战略开发)</p><h1 id="Python的缺点"><a href="#Python的缺点" class="headerlink" title="Python的缺点"></a>Python的缺点</h1><p>速度没C和C++快，因为Python没有将代码编译成底层的二进制代码。<br>在一些需要优化程序执行速度的应用领域，如数值计算和动画，可以通过分离一部分需要优化速度的应用，将其变化为编译好的扩展，仍可以使用Python。</p><h1 id="程序执行-Python视角"><a href="#程序执行-Python视角" class="headerlink" title="程序执行-Python视角"></a>程序执行-Python视角</h1><h2 id="字节码编译，PVM，性能和开发的含义"><a href="#字节码编译，PVM，性能和开发的含义" class="headerlink" title="字节码编译，PVM，性能和开发的含义"></a>字节码编译，PVM，性能和开发的含义</h2><p><strong>解释器：</strong>代码和机器的计算机硬件之间的软件逻辑层<br><strong>python的运行步骤:</strong> 源代码(.py)→字节码(.pyc)→PVM(Python Virtual Machine)<br>PVM实际上是迭代运行字节码指令的一个大循环，是Python的运行引擎，是实际运行脚本的组建。<br>Python的字节码非机器的二进制代码，它具有可移植性。<br>Python没有”build”和”make”步骤，代码在写好之后立即运行，所以纯Python代码的运行速度在传统编译语言和传统解释语言之间。</p><p>Python编译和执行源代码的系统是同一个系统，在Python中编译器总在运行中出现，并且是运行程序系统中的一部分，在程序开始执行之前不需要预编译和连接。<br>Python代码是可以动态地修改的，所以用Python可以实现产品的定制。<br>在Python中所有的事情都是程序运行时才发生的，不需要初始的编译阶段。</p><h1 id="执行优化的工具"><a href="#执行优化的工具" class="headerlink" title="执行优化的工具"></a>执行优化的工具</h1><h2 id="Psyco实时编译器-JIT"><a href="#Psyco实时编译器-JIT" class="headerlink" title="Psyco实时编译器(JIT)"></a>Psyco实时编译器(JIT)</h2><p>Psyco系统是一个扩展字节码执行模块的组建，一个PVM的增强工具。Psyco可以将部分程序的字节码转化为二进制机器代码(字节码的转化与程序运行同时发生)，在开发过程中也无需修改或独立的编译步骤。<br>理想情况下，Psyco优化的Python代码的执行速度可跟C代码一样快。<br>Psyco最大的缺点是只能够为Intel x86构架的芯片生成机器代码。</p><h2 id="Shedskin-C-转换器"><a href="#Shedskin-C-转换器" class="headerlink" title="Shedskin C++转换器"></a>Shedskin C++转换器</h2><p>Shedskin是一个引擎系统，是一种平台无关的方式来运行Python代码。(Python代码→C++代码→使用机器中的C++编译器将C++代码编译为机器代码)</p><h1 id="交互提示模式下编写代码"><a href="#交互提示模式下编写代码" class="headerlink" title="交互提示模式下编写代码"></a>交互提示模式下编写代码</h1><h2 id="使用交互提示模式"><a href="#使用交互提示模式" class="headerlink" title="使用交互提示模式"></a>使用交互提示模式</h2><p>初学者牢记技巧：</p><p>1.只能够输入Python命令</p><p>2.文件中的打印语句是必须的，如print</p><p>3.交互提示模式下不需要缩进</p><p>4.留意提示符的变换和复合语句：CTRL+C可以返回主提示模式</p><p>5.交互模式中用一个空行结束符合语句：按下两次ENTER</p><p>6.交互模式中一次运行一条语句</p><h1 id="系统命令行和文件"><a href="#系统命令行和文件" class="headerlink" title="系统命令行和文件"></a>系统命令行和文件</h1><h2 id="使用命令行运行文件"><a href="#使用命令行运行文件" class="headerlink" title="使用命令行运行文件"></a>使用命令行运行文件</h2><p>流重定向(stream redirection)：用于文本的输入和输出。</p><p>如需要把script.py的输出行存储到saveit.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span> python script.py &gt; saveit.txt</span><br></pre></td></tr></table></figure><p>在较新版的win上可以只输入脚本的名字，并省略掉Python本身的名字，因为新的win系统使用win注册表找到用哪个程序来运行一个文件(这个命令行模式的实质类似于UNIX #!)。</p><h2 id="UNIX可执行脚本"><a href="#UNIX可执行脚本" class="headerlink" title="UNIX可执行脚本(#!)"></a>UNIX可执行脚本(#!)</h2><p>UNIX风格的可执行脚本有两个特殊的属性：</p><ul><li>脚本的第一行往往以#！(hash bang)开始，其后紧跟着Python解释器的路径（win的dos系统shell会完全忽略它）</li><li>脚本往往具有可执行的权限，可使用chmod+x <em>file.py</em>来实现</li></ul><p>在一些UNIX系统上也可以使用env来避免硬编码Python解释器的路径，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/usr/bin/env python</span></span><br></pre></td></tr></table></figure><p>env程序可以通过系统的搜索路径的设置定位Python解释器，这种方法可以代码更具可移植性(env在任何系统中都是相同的路径的前提下)。</p><h1 id="点击文件图标"><a href="#点击文件图标" class="headerlink" title="点击文件图标"></a>点击文件图标</h1><h2 id="input的技巧"><a href="#input的技巧" class="headerlink" title="input的技巧"></a>input的技巧</h2><p>如果需要利用图标点击运行脚本，脚本输出后暂停，需要在脚本的最后添加内置input函数的一条调用语句(Python3.0的input()或Python2.6中的raw_input，它们会直接把输入的文本作为一个字符串返回。而在Python2,6中的input()会对字符串求值，在Python3.0中模拟Python2.6中的input需要使用eval(input()))。</p><p>在输入时所使用的input调用相当于在输出时使用的打印语句。</p><p>在Win中还有一种完全阻止弹出DOS终端的方法：以pyw为扩展名的文件只显示由脚本构建的窗口，而不是默认的DOS终端窗口。pyw文件是拥有这种特别窗口的操作行为的,py文件。</p><h1 id="模块的导入和重载"><a href="#模块的导入和重载" class="headerlink" title="模块的导入和重载"></a>模块的导入和重载</h1><p>导入是个开销很大的操作，所以每个文件或程序运行不能重复多于一次。</p><p>但如果需要Python在同一次会话中再次运行文件，需要调用imp标准库模块中可用的reload函数(Python2.6中内置)。在重载之前需要确保已经成功导入了这个模块。</p><h2 id="模块的重要特性：属性"><a href="#模块的重要特性：属性" class="headerlink" title="模块的重要特性：属性"></a>模块的重要特性：属性</h2><p>一般意义上说，模块往往是变量名的封装，被认作是命名空间。</p><p>属性就是绑定在特地的对象上的变量名(就像一个模块)。</p><p>表面上看一个模块文件的变量名可以通过import和from两个Python语句以及reload调用。</p><p>from复制了模块的属性，以便属性能够成为接收者的直接变量。</p><p>内置的dir函数可以用于获得模块内部可用的变量名列表。</p><p>模块文件在代码文件中起到了最小化命名冲突的作用。</p><h2 id="import和reload的使用注意事项"><a href="#import和reload的使用注意事项" class="headerlink" title="import和reload的使用注意事项"></a>import和reload的使用注意事项</h2><p>reload是不可传递的，重载一个模块只会重载该模块，不会重载该模块所导入的任何模块。</p><p>Python将会从列在sys.path中的所有目录搜索被导入的模块。</p><h2 id="使用exec运行模块文件"><a href="#使用exec运行模块文件" class="headerlink" title="使用exec运行模块文件"></a>使用exec运行模块文件</h2><p>从交互提示模式启动文件而不必导入以及随后重载的方法(Python2.6)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec(open(‘module.py’).read())  <span class="comment">#方法一</span></span><br><span class="line">execfile(<span class="string">'module.py'</span>) <span class="comment">#方法二</span></span><br></pre></td></tr></table></figure><p>每次exec都运行文件的最新版本。</p><p>exec从技术上不会导入模块，默认情况下它都重新运行文件，对当前正在使用的变量有潜在的默认覆盖的可能。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic_Chinese </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
